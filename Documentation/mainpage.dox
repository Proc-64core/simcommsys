/*!
\file

Copyright (c) 2010-2013 Johann A. Briffa

This file is part of SimCommSys.

SimCommSys is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

SimCommSys is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with SimCommSys.  If not, see <http://www.gnu.org/licenses/>.


\mainpage SimCommSys Project
\author   Johann Briffa


\section intro Introduction

The SimCommSys project consists of a set of C++ libraries for simulating
communication systems using a distributed Monte Carlo simulator.
Of principal interest is the error-control coding component, where various
kinds of binary and non-binary codes are implemented, including turbo, LDPC,
repeat-accumulate, and Reed-Solomon.
This project also contains a number of executables implementing various
stages of the communication system (such as the encoder, decoder, and a
complete simulator) and a system benchmark.
Finally, a number of shell and python scripts are provided to encapsulate
routine use cases.


\section classes Principal Classes

The most important classes in this project are:
- libcomm::montecarlo, which implements a distributed Monte Carlo simulator.
   The simulator automatically detects convergence and terminates according
   to the required confidence and tolerance level.
- libcomm::commsys_simulator, which implements a libcomm::experiment as
   required by libcomm::montecarlo for simulating the performance of a
   complete communication system.
- libcomm::commsys, which defines a complete block-based communication
   system, including:
   - libcomm::codec, the error-control codec
   - libcomm::mapper, a symbol-mapping between the codec and modulator
   - libcomm::blockmodem, the modulation scheme
   - libcomm::channel, a model for the communications channel

\image html CommSysFlowchart.png "Data Flow in CommSys"
\image latex CommSysFlowchart.pdf "Data Flow in CommSys" width=\textwidth

A ToDo list for the project is kept at \ref todo.


\section howtos HowTos

SimCommSys is a very powerful and as a consequence complex system which
requires a fairly steep learning curve.
This section contains a set of howtos aimed at helping someone getting to
grips with the system and hopefully provide enough detail to get going,
If you find that any of the howtos is unclear or contains wrong/out-of-date
information then please update them so that the next person doesn't have to
rediscover the mistakes.
The following set of HowTos will be available:

- \ref developmentenvironment, provides:
   - details on the required development packages
   - instructions on how to set up Eclipse/Visual Studio
   - details on how to check out the code
- My First Codec (not written yet), provides a quick introduction to:
   - the classes required to write a codec
   - the serialisation Macros
- \ref profiling, for guidance on using the profiler to help with code
   optimization.
- \ref simulation, provides details on how to:
   - set up a new simulation
   - run a simulation locally and on the cluster
- \ref plotresults, provides details on how to turn the simulation results
   into graphs.
- \ref innercodes, explains how to define insertion/deletion correcting
   inner codes.
- \ref svnmove, useful for moving material to a new repository, keeping
   version history

\section authors Contributing Authors

This is the list of authors who have contributed directly to the code base,
together with their last known contact details. Authors are listed in
order of decreasing contribution.
- Johann A. Briffa <j.briffa@surrey.ac.uk>
- Stephan Wesemeyer <s.wesemeyer@surrey.ac.uk>


\section funding Project Funding

Various parts of this software have been developed with support from the
following funding sources. Sources are listed in chronological order.
- The Fourth Italo-Maltese Financial Protocol, 1997-1999.
- EUMedGrid FP6 project, contract No 026024, 2007.
- Engineering and Physical Sciences Research Council (EPSRC) UK,
   grant EP/E056407/1, 2007-2010.

Parts of this software were developed while the authors were studying or
employed with the following institutions. These are listed in chronological
order.
- University of Malta, 1997-1999
   - JAB was employed as a Research Engineer on the project "Integrated
      DigitalSignal Processing and Telecommunication Systems" in collaboration
      with the University of Lecce, and later as an Assistant Lecturer.
   - The software was developed as part of his M.Phil. studies.
- Oakland University, Rochester MI, 2000-2003
   - JAB was employed as a Graduate Assistant with the Dept of Electronics
      and Systems Engineering.
   - The software was developed as part of his PhD studies.
- University of Malta, 2004-2007
   - JAB was employed as a Lecturer.
   - The software was developed as part of his ongoing research.
- University of Surrey, 2007-
   - JAB was employed as a Research Fellow on the Error-Control Watermaring
      project, and later as a Lecturer.
   - SW was employed as a Research Fellow on the same project, and later
      as a Tutor.
   - The software was developed for the ECW project and later as part of
      the authors' ongoing research.

*/
