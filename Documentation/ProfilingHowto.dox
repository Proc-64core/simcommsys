/*!
\file

Copyright (c) 2013 Johann A. Briffa

This file is part of SimCommSys.

SimCommSys is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

SimCommSys is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with SimCommSys.  If not, see <http://www.gnu.org/licenses/>.


\page profiling Profiling your code
\author   Stephan Wesemeyer

\todo Update according to current Makefile.


In order to profile your code, you need to follow these steps:

-# In your code branch execute
\verbatim
make profile
\endverbatim
   This will generate a Profile directory for each project (similar to the
   Release and Debug folders).
-# Create a folder somewhere else where you want to store the profiling
   information you are about to gather, e.g.
\verbatim
cd ~
mkdir Profiling
cd Profiling
\endverbatim
-# execute the command you want to profile as you normally would but use the
   binary in the Profile directory, e.g.
\verbatim
/path_to_my_branch/path_to_code_to_be_profiled/Profile/<Arch>/NameOfExecutable <any required parameters>
\endverbatim
   where:
   - <Arch> is the architecture of your processor (i686, x86_64, etc)
   - <any required parameters> are the parameters you would usually pass to
      this code
-# This will produce a file called gmon.out containing the desired profiling
   information. To turn this binary file into human readable form, execute
\verbatim
gprof
path_to_my_branch/path_to_code_to_be_profiled/Profile/<Arch>/NameOfExecutable gmon.out > NameOfExecutable_profile.txt
\endverbatim
-# You can now open the NameOfExecutable_profile.txt in any editor and find out
   where your code spend most of its time

*/
