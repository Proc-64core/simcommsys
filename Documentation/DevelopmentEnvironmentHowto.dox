/*!
\file

Copyright (c) 2013 Johann A. Briffa

This file is part of SimCommSys.

SimCommSys is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

SimCommSys is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with SimCommSys.  If not, see <http://www.gnu.org/licenses/>.


\page developmentenvironment How to set up your development environment
\authors   Stephan Wesemeyer, Johann Briffa
$Id$



\section intro Introduction

The SimCommSys project can be built on either Linux or Windows.
However, Windows is usually a second-class citizen and the main development
branch will not always compile for Windows.
Main development takes place on Linux and effort is made to ensure that the
main development branch compiles and works.
Tagged stable branches, however, should always be tested to compile and run
on all supported operating systems and development environments.

This document describes the pre-requisites for developing on Linux and Windows
and how to set up the development environments.


\section software Software Required

The code base is meant to be edited using an IDE; requirements depend on
the operating system:
- Linux development is based on an Ubuntu 12.04 LTS (64-bit) reference
   platform, and includes:
   - G++ 4.6.3
   - Eclipse 3.7.2 with Subversive plugin for SVN integration and Eclox for
   Doxygen access.
- Windows development is based on a Windows XP SP3 (32-bit) reference
   platform, and assumes Microsoft Visual Studio 2008; the Team System is
   suggested for its performance-related tools.  The Refactor! plugin from
   Developer Express Inc. is also recommended (this has not been tested with
   VS 2008).

\note Windows support is currently on hold, pending transition to a 64-bit
edition of Windows and Visual Studio 2010.

Other than G++ and GNU Make, the principal build requirement for SimCommSys
is a recent development version of Boost, together with the 'Program
Options' optional component.
The reference version is Boost 1.46.1 as found in the standard Ubuntu repos
(later versions should also probably work).
It is suggested to install all optional components, as these may be used in
later versions of this software.

Further details on how to install each platform follows.


\section linux Linux Development Environment


\subsection install Installing the Necessary Software

This document assumes that you are working with an Ubuntu 12.04 LTS
(64-bit) server as that's the current University of Surrey supported desktop
environment.
If you are starting from scratch, download the necessary ISO from Canonical
(http://www.ubuntu.com/download/server).
Next, add the following third-party repositories.

\verbatim
# Johann Briffa's repo (for the development meta-packages):
echo "deb http://guinevere.res.um.edu.mt/packages/ precise main" | sudo tee /etc/apt/sources.list.d/jb.list
wget -q -O - http://guinevere.res.um.edu.mt/keys/jabriffa.pub | sudo apt-key add -
# Canonical Partner:
sudo sed -i '/precise partner/ s/# //' /etc/apt/sources.list
# Chrome:
echo "deb http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
# Medibuntu:
sudo wget --output-document=/etc/apt/sources.list.d/medibuntu.list http://www.medibuntu.org/sources.list.d/$(lsb_release -cs).list
sudo aptitude update && sudo aptitude install -y medibuntu-keyring
# VirtualBox:
echo "deb http://download.virtualbox.org/virtualbox/debian precise contrib non-free" | sudo tee /etc/apt/sources.list.d/virtualbox.list
wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc -O- | sudo apt-key add -
\endverbatim

\note The VirtualBox repository is only needed if you want to install a virtual
machine, for example for Windows development.

Once this has been done, update the package lists and install the meta-packages.
This will automatically install the necessary dependencies for SimCommSys
development.

\verbatim
# once we're done, update the package lists
sudo aptitude update
# install the meta-packages
sudo aptitude install jbdevelopment jbdesktop
\endverbatim

\note The 'jbdevelopment' package is required for building the project.
The 'jbdesktop' package is only needed for a desktop system, and provides the
necessary software and environment.


\subsection boost Installing Boost Manually

If the version in your OS repos is too old (or if you do not have the
authority to do the installation), it is possible to install this locally
(in your home directory) with the following commands, replacing the version
as needed:

\verbatim
svn co http://svn.boost.org/svn/boost/tags/release/Boost_1_47_0
cd Boost_1_47_0
./bootstrap.sh --prefix=$HOME
./b2 install
\endverbatim

Of course you will need to add the local folders into your compiler and
linker search paths, using (for bash):

\verbatim
export LIBRARY_PATH=$HOME/lib:$LD_LIBRARY_PATH
export C_INCLUDE_PATH=$HOME/include:$C_INCLUDE_PATH
export CPLUS_INCLUDE_PATH=$HOME/include:$CPLUS_INCLUDE_PATH
\endverbatim


\subsection other Other Distributions

The code base is meant to be as platform-independent as possible.
However, the varying support of standard C++ and other odd differences
between compilers mean that untested platforms may cause problems.
We document here the platforms currently in use (in addition to the reference
platform documented earlier):
- Fedora Core 6 with G++ 4.1.2 and Boost 1.33.1
- RHEL AS 4 with G++ 3.4.6 and Boost 1.32
- Scientific Linux CERN 3 with G++ 3.2.3 and Boost 1.32

\todo In the above, document which system each is, to facilitate removal
or updating in the future.


\subsection eclipse Eclipse Integrated Development Environment

The currently supported IDE on Linux is Eclipse, which will need to be
configured as follows:

-# In the development folder create another folder called eclipse_workspaces and
within it a directory called myBranchName:
\verbatim
cd ~/development
mkdir -p eclipse_workspaces/mbn
\endverbatim
-# Start eclipse and choose the mbn(=myBranchName) directory as the location for
your workspace.
-# Close the welcome screen.
-# Install the svn plugin by clicking Help->Install New Software and
doing the following:
   - Next to 'Work With' choose 'All Available Sites'
   - Type 'svn' into the filter
   - Select the following packages, and install them:
      - Subversive SVN Team Provider
      - Subversive SVN Connectors
      - SVNKit 1.3.5 Implementation
-# Accept the licence and the offer to restart eclipse for you.
-# Import the JAB code style file:
   - Select Window->Preferences->C/C++->Code Style->Import
   - Browse to ~/development/svn/Programming/branches/mbn/JAB C++ Code Style.xml
   and click OK followed by Apply & then OK again.
-# Import the various projects in your branch by selecting
File->Import->General->Existing Projects into Workspace & clicking Next,
selecting the root direcory of the project & clicking finish.
Initially, the most important projects to import are the following:
\verbatim
Libraries/
   Libbase/
   Libcomm/

SimCommSys/
   CSdecode/
   CSencode/
   CStransmit/
   CSfullcycle/
   SimCommsys/
   SPECturbo/
\endverbatim
It is safe to import all projects but initially this should be more
than sufficient.
-# Use Ctrl-B to compile the whole project. There should be no compilation
problems.
-# If the version control information is not accessible through Eclipse, you
will need to associate the Eclipse projects with their version control metadata.
To do this, right-click on each project and select Team.
If you get presented with 2 options (Apply Patch/Share Project), select
Share Project and accept the following screens.

You are now set up!
Important Eclipse shortcuts:
   - Ctrl-Shift-F: format the current file (according to the coding style)
   - Ctrl-B: build all
   - Ctrl-s: save
   - Ctrl-o: show outline of class
   - Ctrl-Space: command completion
   - Ctrl-Shift-r: open resource


\section windows Windows Development Environment

The current supported IDE for Windows is Microsoft Visual Studio 2010.
It is recommended to use the Premium or Ultimate edition, as these contains
the useful profiling tools.
Installing this is simply a matter of:
- Downloading the DVD and installing it.
- Downloading the latest service pack (currently SP1) and installing it.
- Downloading the MSDN Library documentation and installing it.

All DVDs above may be obtained through MSDNAA.

\subsection boost Installing Boost

Windows development also requires the development Boost libraries to be
installed.
However, since the Solution may be built either as 32-bit (Win32) or 64-bit
(x64), you need two versions for the Boost libraries, one for each platform.
The location of the Boost root directory should be pointed to by the
environmental variable \c BOOST_ROOT.
The 32-bit libraries are assumed to be under \c BOOST_ROOT/lib/w32, whereas the
64-bit libraries are assumed to be under \c BOOST_ROOT/lib/x64.

-# Download the distribution from
\verbatim
http://www.boost.org/users/download/
\endverbatim
It is recommended to use the same version as in Linux builds.
-# Extract this to a suitable folder
(e.g. <tt>C:\\Program Files\\boost</tt>)
This will create a subfolder according to the version installed
(e.g. <tt>C:\\Program Files\\boost\\boost_1_54_0</tt>)
-# Set the \c BOOST_ROOT environment variable to this folder; in Windows 7 and
above this can be done through the 'Edit environment variables for your account'
link available through the start menu.
-# In order to build the binaries for the 64-bit version of Boost, from within
the boost root folder you need to issue the command
\verbatim
bjam --toolset=msvc-10.0 address-model=64 --build-type=complete stage
\endverbatim
Then move the contents of <tt>stage\\lib</tt> to <tt>lib\\x64</tt>.
-# For the 32-bit version, you need the command
\verbatim
bjam --toolset=msvc-9.0 --build-type=complete stage
\endverbatim
Then move the contents of \c stage\lib to \c lib\win32.
Between builds remove the directories \c bin.v2 and \c stage.

\subsection setup Setting up

Style setup is done by importing "JAB C++ Code Style.vssettings" through
Tools->Import and Export Settings. This also sets up the necessary folder
settings for Boost usage.

\subsection tagging Executables Tagging

For Exectutables to be tagged properly with the branch label, you need to
load the macro file SimCommSys.vsmacros.
Unfortunately this would apply to all Visual Studio solutions, so you can
only load one whatever branch you are in.
Therefore it is suggested that you load the one in the trunk.
If you need to modify this in a particular branch, it is suggested that
you temporarily unload the macro file from trunk and load the one from the
required branch.

\note The macro file includes also a macro that stops the build process when
a a build error is encountered.  The normal behaviour of Visual Studio is
to proceed the build process.  With a Solution with lots of projects this
could be a problem.

\subsection install Installing SimCommsys Executables

To install the 32-bit binaries right click on the "Install Win32" project
file under the folder Installer and choose "Install".
If this is greyed out, you need to build the solution first.
Make sure that you select the Win32 platform when doing so.
It is recommended that the binaries are installed under
<tt>c:\\Program Files (x86)\\SimCommSys</tt>,
which is the default option in this case.

To install the 64-bit binaries right click on the "Install x64" project file
under the folder Installer and choose "Install".
If this is greyed out, you need to build the solution first.
Make sure that you select the x64 platform when doing so.
It is recommended that the binaries are installed under
<tt>c:\\Program Files\\SimCommSys</tt>,
which is the default option in this case.


\section checkout Checking out the source code

\note In this section we assume you're working with a Linux system.

In order to access the svn repository you need to provide Johann Briffa with a
username and a hashed password.

-# Create a password by calling
\verbatim
htpasswd -nm <username>
\endverbatim
where <username> is the username you would like to use to access the svn
repository.
Note that it does not have to be your Unix username.
Please use a different password from your standard login password.
-# Provide Johann Briffa with the output so that he can set you up on the svn
server.
-# Once you are set up, change into your development directory (for example,
a folder called 'development' under your home directory)
\verbatim
cd ~/development
\endverbatim
-# create a directory called svn and change into it
\verbatim
mkdir svn
cd svn
\endverbatim
-# check out the following folders:
\verbatim
svn co https://guinevere.res.um.edu.mt/svn/shared/Programming
svn co https://guinevere.res.um.edu.mt/svn/shared/Scripts
\endverbatim
\note If you have only been given access to a specific branch, you will need
to replace the URL in the first line with that for your specific branch.

-# Create your own branch of the project:
\note Ignore if you have only been given access to a specific branch.

\verbatim
cd Programming/branches
mkdir mbn
svn copy ../../trunk mbn
svn commit -m "create mbn"
\endverbatim
Replace mbn(=myBranchName) with something appropriate.
The current convention is to use initials, e.g. jab.


\section conventions Coding Conventions and Formatting

Conventions for code formatting that are used within this project include:
- Use of spaces rather than tabs in text files; tabs, when present, should
   be replaced by spaces.
- Indenting using 3-space, at all levels
- Indenting braces, which are to be usually on separate lines
- Wherever possible, lines should be kept to less than 80 characters width;
   please use line-breakers only where strictly necessary
- Doxygen documentation should use '\' to indicate keywords; short-style
   comment forms should only be used where a brief description only is to
   be given.

Please set your editor preferences accordingly; for Eclipse and Visual
Studio these can be found under 'Code Style'.
When adding to or modifying existing code, please keep to the coding style
already present, as far as possible, unless this is already non-conforming.
Setting your editor preference helps avoid needless automatic editing, which
complicates merges.
Edits which are primarily sylistic should be committed separately.

*/
